name: "[Nethermind] Raiko Client SP1 - Docker build and push"

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - "v*-sp1"
    paths:
      - "**"
      - "!docs/**"
      - "!img/**"
      - "!**/*.json"
      - "!**/README.md"
      - "!docker/**"
      - "!.github/**"
      - "host/config/chain_spec_list_default.json"

env:
  DOCKER_REGISTRY: nethermind.jfrog.io
  DOCKER_REPOSITORY_STAGING: core-oci-local-staging/raiko-zk
  DOCKER_REPOSITORY_PROD: core-oci-local-prod/raiko-zk

jobs:
  build:
    name: Build and push docker image
    runs-on: [self-hosted, linux, x64]  # Custom runner labels
    if: github.repository == 'NethermindEth/raiko'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            short: amd64

    outputs:
      digest-amd64: ${{ steps.digest.outputs.amd64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_CORE_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_CORE_TOKEN_DEVELOPER }}

      - name: Docker meta for dev
        id: meta-dev
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_STAGING }}
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Build and push with tags
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.zk
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          labels: ${{ steps.meta-dev.outputs.labels }}

      - name: Set digest output
        id: digest
        run: |
          echo "amd64=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_STAGING }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  merge:
    name: Create manifest and promote to Production
    runs-on: [self-hosted, linux, x64]  # Custom runner
    needs: build
    steps:
      - name: Setup ORAS
        uses: oras-project/setup-oras@v1

      - name: Check ORAS version
        run: oras version

      - name: Login to registry with ORAS
        run: |
          oras login ${{ env.DOCKER_REGISTRY }} \
            -u ${{ secrets.ARTIFACTORY_CORE_USERNAME }} \
            -p ${{ secrets.ARTIFACTORY_CORE_TOKEN_DEVELOPER }}

      - name: Promote to PROD
        run: |
          for tag in $TAGS; do
            echo "Current tag: $tag"
            source_image="${DOCKER_REGISTRY}/${DOCKER_REPOSITORY_STAGING}:${tag}"
            prod_image="${DOCKER_REGISTRY}/${DOCKER_REPOSITORY_PROD}:${tag}"
            echo "Promoting ${source_image} to ${prod_image}"
            oras cp -r "${source_image}" "${prod_image}"
          done

      - name: Summary
        run: |
          echo "## SGX Docker build completed âœ…" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          for tag in $TAGS; do
            echo "- $tag" >> $GITHUB_STEP_SUMMARY
          done
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- The images have been pushed to ${DOCKER_REPOSITORY_STAGING} repo" >> $GITHUB_STEP_SUMMARY
          echo "- **STAGING Repository**: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_STAGING }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PROD Repository**: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_PROD }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
